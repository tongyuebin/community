<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <context id="DB2Tables" targetRuntime="MyBatis3">

        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator>
            <property name="suppressAllComments" value="true" />
        </commentGenerator>
        <jdbcConnection driverClass="org.h2.Driver"
                        connectionURL="jdbc:h2:~/community"
                        userId="root"
                        password="1234">
        </jdbcConnection>

        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver >
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- Model模型生成器,用来生成含有主键key的类，记录类以及查询Example类
                  targetPackage     指定生成的model生成所在的包名
                  targetProject     指定在该项目下所在的路径
              -->
        <javaModelGenerator targetPackage="com.tyb.community.model" targetProject="src/main/java">
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="true" />
            <!-- 是否对CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true" />
        </javaModelGenerator>


        <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="mapper"  targetProject="src/main/resources">
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>

        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
                     type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                     type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                     type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
             -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.tyb.community.mapper"  targetProject="src/main/java">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>


        <table tableName="user" domainObjectName="User" >

            <property name="useActualColumnNames" value="false"/>
            <!-- optional  , only for mybatis3 runtime
              自动生成的键值（identity,或者序列值）
              如果指定此元素，MBG将会生成<selectKey>元素，然后将此元素插入到SQL Map的<insert> 元素之中
              sqlStatement 的语句将会返回新的值
              如果是一个自增主键的话，你可以使用预定义的语句,或者添加自定义的SQL语句. 预定义的值如下:
               MySql: SELECT LAST_INSERT_ID()
               JDBC: mybatis默认给一个返回主键的值.
               identity: 自增主键  If true, then the column is flagged as an identity column and the generated <selectKey>
                element will be placed after the insert (for an identity column). If false, then the generated <selectKey> will be placed before
                the insert (typically for a sequence).
            -->
            <generatedKey column="ID" sqlStatement="identity" identity="true" />

            <!--optional.覆盖MBG对Model 的生成规则
                column: 数据库的列名
                javaType: 对应的Java数据类型的完全限定名
                在必要的时候可以覆盖由JavaTypeResolver计算得到的java数据类型.
                jdbcType:该列的JDBC数据类型(INTEGER, DECIMAL, NUMERIC, VARCHAR, etc.)，该列可以覆盖由JavaTypeResolver计算得到的Jdbc类型，
                typeHandler:
             -->
            <!--
            <columnOverride column="" javaType="" jdbcType="" typeHandler=""  delimitedColumnName="" />
            -->
            <!-- optional.告诉 MBG 忽略某一列
                    column，需要忽略的列
                    delimitedColumnName:true ,匹配column的值和数据库列的名称 大小写完全匹配，false 忽略大小写匹配
                    是否限定表的列名，即固定表列在Model中的名称
            -->
           <!--
           <ignoreColumn column=""/>
           -->
        </table>

    </context>
</generatorConfiguration>